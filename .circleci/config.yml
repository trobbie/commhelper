version: 2

defaults: &defaults
  # each command runs in separate shell with this working_directory
  working_directory: ~/repo
  docker: 
    - image: trion/ng-cli-e2e:7.2.3

jobs:
  buildweb_ci_test:
    <<: *defaults
    
    steps:
      - add_ssh_keys:
          fingerprints:
            - "60:42:65:e6:01:1e:76:77:9a:60:35:bf:56:0a:8f:d3"
      - run:
          name: Avoid bitbucket.org authenticity warning for non-interactive mode
          command: |
            # editing ~/.ssh/config did not work, so using this method:
            mkdir ~/.ssh/ && ssh -oStrictHostKeyChecking=no -T git@bitbucket.org

      - checkout

      # add custom environment variables into our bash environment
      - run: 
          name: "Setup custom environment variables"
          command: |
            echo 'export WEB_COMPONENT_FOLDER="frontend/web"' >> $BASH_ENV
            echo 'export COMMHELPER_ENV="ci_test"' >> $BASH_ENV

      - restore_cache:
          name: Restoring cache (node dependencies)
          keys:
          # v1 => package manager is node 6 (update cache version if npm version changes)
          - v1-npm-dep-{{ checksum "package.json" }}-{{ checksum "frontend/web/package.json" }}-{{ checksum "services/api/package.json" }}
          # fallback to using the latest cache it no exact match is found
          - v1-npm-dep-

      # NOTE: we wish to run "npm install" even if node_modules exist, so that
      #   security audit checks are always done (and errors correctly break our pipeline)
      - run: 
          name: Installing node modules for root
          command: npm install

      - run: 
          name: Installing node modules for individual services
          command: npm run postinstall

      - save_cache:
          name: Saving cache (node dependencies)
          paths:
            - node_modules
            - frontend/web/node_modules
            - services/api/node_modules
          key: v1-npm-dep-{{ checksum "package.json" }}-{{ checksum "frontend/web/package.json" }}-{{ checksum "services/api/package.json" }}

      - run:
          name: Linting Frontend code
          command: cd $WEB_COMPONENT_FOLDER && npm run lint

      - run:
          name: Start database service in background
          command: |
            aws configure get region
            npm run start:dev_db
          background: true

      # wait for the server to start responding. We expect Bad Request 400 once it starts listening.
      # so override the shell and have the last command be the : { null } command to force exit code 0.
      - run:
          name: Waiting for database service to load
          shell: /bin/sh
          command: |
            wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 http://localhost:4002
            :

      - run:
          name: Setup seed data
          command: npm run resetDatabase:dev

      - run:
          name: Start REST service in background
          command: npm run start:dev_api
          background: true

      - run:
          name: Waiting for REST service to load
          shell: /bin/sh
          command: |
            wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 http://localhost:3000
            :
      - run:
          name: Unit test the frontend
          command: cd $WEB_COMPONENT_FOLDER && npm run test:headless-browser

      - run:
          name: build the release
          command: cd $WEB_COMPONENT_FOLDER && ng build --prod --no-progress

      # end result of this job is the "dist" build (from build)
      - persist_to_workspace:
          root: ~/repo
          paths:
            - frontend/web/dist/*

  # e2e_tests:
  #   <<: *defaults

  #   steps:
  #     - attach_workspace:
  #         at: ~/repo

  #     - restore_cache:
  #         name: Restoring cache (global node packages)
  #         keys:
  #         - v2-npm-global-pm2-3.3.1

  #     - run: 
  #         name: Installing pm2 used for webservice-ci task
  #         command:  |
  #           cd $WEB_COMPONENT_FOLDER
  #           npm install pm2@3.3.1 -g

  #     - save_cache:
  #         name: Saving cache (global node packages)
  #         paths:
  #           - /usr/local/lib/node_modules/pm2/bin
  #           - /usr/local/bin/pm2
  #           - /usr/local/bin/pm2-dev
  #           - /usr/local/bin/pm2-runtime
  #           - /usr/local/bin/pm2-docker
  #         key: v2-npm-global-pm2-3.3.1

  #     - run:
  #         name: Startup data webservice for e2e tests
  #TOOD: change to new web service (DynamoDB Local)
  #         command: cd $WEB_COMPONENT_FOLDER && pm2 start npm -- run webservice-ci

  #     - run: cd $WEB_COMPONENT_FOLDER && npm run e2e
 
  # deploy_to_staging:
  #   <<: *defaults
  #   # DESCRIPTION: deploy in permanent staging environment
  #   steps:
  #     # DECISION TODO (thinking outloud here):
  #     #   I wish to test db update scripts on a commit, i.e. that more closely
  #     #   tests production deployment, but that also complicates
  #     #   the test migration data (migration data contains the changes or not?)
  #     #   
  #     # ##overwrite staging database with archived test migration data
  #     # ## note: no need to run archived database code scripts, as changes assumed
  #     # ##  to already have been applied to migrate data
      
  #     # build and deploy API service
  #     # build and deploy web front-end
  #     # perform minimal liveness tests

  # buildweb_preprod_and_test:
  #   <<: *defaults
  #   # DESCRIPTION: build and test in temporary pre-production environment
  #   steps:
  #     # overwrite preprod database with prod data (full migration)
  #     # run data scripts to update database
  #     # build and unit test API service code
  #     # build and unit test web front-end code
  #     # perform minimal liveness tests (b/c test done in production deploy)
  #     # run integration/e2e tests
    
  # deploy_to_prod:
  #   <<: *defaults
  #   # DESCRIPTION: build and deploy in permanent production environment
  #   steps:
  #     # DECISION TODO: either take production service containers down, 
  #     #   or build in alternate containers and "flip switch" to point production to new containers
  #     # run data scripts to update database
  #     # build and deploy API service
  #     # bulid and deploy web front-end
  #     # perform minimal liveness tests

workflows:
  version: 2
  build_test_deploy_testing:
    jobs:
      - buildweb_ci_test
      # - e2e_tests:
      #     requires:
      #       - buildweb
      # - deploy_to_testing:
      #     requires:
      #       - unit_tests
      #       - e2e_tests
  #build_test_deploy_staging:
  #  jobs:
  #     - buildweb
  #     - e2e_tests:
  #         requires:
  #           - buildweb
  #     - deploy_to_staging:
  #         requires:
  #           - unit_tests
  #           - e2e_tests
  # build_test_deploy_prod:
  #   jobs:
  #     - buildweb_preprod_and_test:
  #         filters:
  #           branches:
  #             only: prod
  #     - approve_production: # HOLD for manually approval for promotion
  #       type: approval
  #       requires:
  #         - buildweb_preprod_and_test
  #     - deploy_to_prod:
  #       requires:
  #         - approve_production 



